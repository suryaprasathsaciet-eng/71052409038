      #include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Define structure for Attendance Record
typedef struct Attendance {
    int studentID;
    char date[15];
    char status[10]; // "Present" or "Absent"
    struct Attendance *next;
} Attendance;

// Function Prototypes
Attendance* addAttendance(Attendance *head);
Attendance* deleteAttendance(Attendance *head, int studentID, char *date);
void searchAttendance(Attendance *head, int studentID, char *date);
void displayByDate(Attendance *head, char *date);
Attendance* reverseAttendance(Attendance *head);
Attendance* cloneAttendance(Attendance *head);
void displayAll(Attendance *head);

// Function to Add Attendance Record
Attendance* addAttendance(Attendance *head) {
    Attendance newNode = (Attendance) malloc(sizeof(Attendance));
    if (!newNode) {
        printf("Memory allocation failed!\n");
        return head;
    }

    printf("Enter Student ID: ");
    scanf("%d", &newNode->studentID);
    printf("Enter Date (DD/MM/YYYY): ");
    scanf("%s", newNode->date);
    printf("Enter Status (Present/Absent): ");
    scanf("%s", newNode->status);
    newNode->next = NULL;

    // Append at end
    if (head == NULL)
        head = newNode;
    else {
        Attendance *temp = head;
        while (temp->next != NULL)
            temp = temp->next;
        temp->next = newNode;
    }

    printf("Attendance record added successfully!\n");
    return head;
}

// Function to Delete Incorrect Attendance Entry
Attendance* deleteAttendance(Attendance *head, int studentID, char *date) {
    if (head == NULL) {
        printf("No attendance records found.\n");
        return head;
    }

    Attendance *temp = head, *prev = NULL;

    // Case 1: Head node is to be deleted
    if (temp != NULL && temp->studentID == studentID && strcmp(temp->date, date) == 0) {
        head = temp->next;
        free(temp);
        printf("Attendance record deleted successfully!\n");
        return head;
    }

    // Case 2: Search for node to delete
    while (temp != NULL && !(temp->studentID == studentID && strcmp(temp->date, date) == 0)) {
        prev = temp;
        temp = temp->next;
    }

    if (temp == NULL) {
        printf("Record not found!\n");
        return head;
    }

    prev->next = temp->next;
    free(temp);
    printf("Attendance record deleted successfully!\n");
    return head;
}

// Function to Search Attendance by Student ID and Date
void searchAttendance(Attendance *head, int studentID, char *date) {
    Attendance *temp = head;
    int found = 0;

    while (temp != NULL) {
        if (temp->studentID == studentID && strcmp(temp->date, date) == 0) {
            printf("\nRecord Found:\n");
            printf("Student ID: %d | Date: %s | Status: %s\n", temp->studentID, temp->date, temp->status);
            found = 1;
            break;
        }
        temp = temp->next;
    }

    if (!found)
        printf("No record found for Student %d on %s.\n", studentID, date);
}

// Display Attendance for a Specific Date
void displayByDate(Attendance *head, char *date) {
    Attendance *temp = head;
    int found = 0;

    printf("\nAttendance List for %s:\n", date);
    while (temp != NULL) {
        if (strcmp(temp->date, date) == 0) {
            printf("Student ID: %d | Status: %s\n", temp->studentID, temp->status);
            found = 1;
        }
        temp = temp->next;
    }

    if (!found)
        printf("No attendance records found for %s.\n", date);
}

// Reverse Attendance List
Attendance* reverseAttendance(Attendance *head) {
    Attendance *prev = NULL, *current = head, *next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    printf("Attendance list reversed successfully!\n");
    return prev;
}

// Clone Attendance List for Admin Review
Attendance* cloneAttendance(Attendance *head) {
    if (head == NULL) return NULL;

    Attendance *cloneHead = NULL, *cloneTail = NULL;
    Attendance *temp = head;

    while (temp != NULL) {
        Attendance newNode = (Attendance) malloc(sizeof(Attendance));
        *newNode = *temp;
        newNode->next = NULL;

        if (cloneHead == NULL)
            cloneHead = cloneTail = newNode;
        else {
            cloneTail->next = newNode;
            cloneTail = newNode;
        }

        temp = temp->next;
    }

    printf("Attendance data cloned successfully for admin review.\n");
    return cloneHead;
}

// Display All Attendance Records
void displayAll(Attendance *head) {
    if (head == NULL) {
        printf("No attendance records available.\n");
        return;
    }

    Attendance *temp = head;
    printf("\n--- All Attendance Records ---\n");
    while (temp != NULL) {
        printf("Student ID: %d | Date: %s | Status: %s\n", temp->studentID, temp->date, temp->status);
        temp = temp->next;
    }
    printf("--------------------------------\n");
}

// Main Function
int main() {
    Attendance *head = NULL, *clonedList = NULL;
    int choice, studentID;
    char date[15];

    do {
        printf("\n=== Student Attendance Monitoring System ===\n");
        printf("1. Add Attendance Record\n");
        printf("2. Delete Incorrect Entry\n");
        printf("3. Search Attendance by Student ID & Date\n");
        printf("4. Display Attendance List for a Date\n");
        printf("5. Reverse Attendance Display\n");
        printf("6. Clone Attendance Data for Admin Review\n");
        printf("7. Display All Attendance Records\n");
        printf("8. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                head = addAttendance(head);
                break;
            case 2:
                printf("Enter Student ID to delete: ");
                scanf("%d", &studentID);
                printf("Enter Date (DD/MM/YYYY): ");
                scanf("%s", date);
                head = deleteAttendance(head, studentID, date);
                break;
            case 3:
                printf("Enter Student ID: ");
                scanf("%d", &studentID);
                printf("Enter Date (DD/MM/YYYY): ");
                scanf("%s", date);
                searchAttendance(head, studentID, date);
                break;
            case 4:
                printf("Enter Date (DD/MM/YYYY): ");
                scanf("%s", date);
                displayByDate(head, date);
                break;
            case 5:
                head = reverseAttendance(head);
                break;
            case 6:
                clonedList = cloneAttendance(head);
                printf("\n--- Cloned Attendance List ---\n");
                displayAll(clonedList);
                break;
            case 7:
                displayAll(head);
                break;
            case 8:
                printf("Exiting system. Goodbye!\n");
                break;
            default:
                printf("Invalid choice! Try again.\n");
        }

    } while (choice != 8);

    return 0;
}
